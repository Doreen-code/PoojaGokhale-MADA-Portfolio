---
title: "R Coding Exercise"
subtitle: "Contributed by: Prasanga Paudel"
date: January 21, 2025
format:
  html:
    toc: false
    number-sections: true
    highlight-style: github
---


Load the dslabs package
```{r}
library(dslabs)
library(skimr) #added skimr

```

Help file for the gapminder data
```{r}
help(gapminder)
```

Look at the data structure
```{r}
str(gapminder)
```

Summarize the data
```{r}
summary(gapminder)
```

Determine the type of object gapminder is
```{r}
class(gapminder)
```

Load the tidyverse library
```{r}
library(tidyverse)
```

Create a dataset with only African countries
```{r}
africadata = gapminder %>% filter (continent=="Africa")
```

Look at the data structure of africadata
```{r}
str(africadata)
```

Summarize the data
```{r}
summary(africadata)
```

Create a new object - with infant mortality and life expectancy
```{r}
africa_mortality_expectancy = africadata %>% select(infant_mortality, life_expectancy)
```

Look at the data structure and summarize the data
```{r}
str(africa_mortality_expectancy)
summary(africa_mortality_expectancy)
```

Create a new object - with population and life expectancy
```{r}
africa_population_expectancy = africadata %>% select(population, life_expectancy)
```

Look at the data structure and summarize the data
```{r}
str(africa_population_expectancy)
summary(africa_population_expectancy)
```

Plot for life expectancy as a function of infant mortality
```{r}
ggplot(data=africa_mortality_expectancy, mapping=aes(x=infant_mortality, y=life_expectancy)) + geom_point()
```

Plot for life expectancy as a function of population
```{r}
ggplot(data=africa_population_expectancy, mapping=aes(x=population, y=life_expectancy)) + geom_point() + scale_x_log10() 
```

Look at the africadata
```{r}
summary(africadata)
```

We have data for the same country multiple times (over multiple years) - the data spans time from 1960 to 2016, so the population grows over time. Since we have multiple years of data for multiple countries, it is difficult to identify patterns.
We can take a look at a single year and try to see if the plot looks different.

First, find missing values in africadata by year.

```{r}
missing_infant_mortality = africadata %>% 
  group_by(year) %>%
  summarize(missing_values = sum(is.na(infant_mortality)))
print(missing_infant_mortality)
```

We can see that there are missing values upto 1980, and then in 2016.
Create an object with only data from 2000.

```{r}
africa2000data = africadata %>% filter(year==2000)
```

Look at the data structure and summarize the data
```{r}
str(africa2000data)
summary(africa2000data)
```

Plot for life expectancy as a function of infant mortality
```{r}
ggplot(data=africa2000data, mapping=aes(x=infant_mortality, y=life_expectancy)) +geom_point()
```

Plot for life expectancy as a function of population
```{r}
ggplot(data=africa2000data, mapping=aes(x=population, y=life_expectancy)) + geom_point() + scale_x_log10()
```

Fitting a model to predict life expectancy using infant mortality
```{r}
lm_mortality = lm(life_expectancy ~ infant_mortality, data=africa2000data)
summary(lm_mortality)
```

Fitting a model to predict life expectancy using population
```{r}
lm_population = lm(life_expectancy ~ population, data=africa2000data)
summary(lm_population)
```

We can see that for the first model (using infant mortality), the p-value for infant mortality is less than 0.05, thus we can conclude that infant mortality is a useful predictor of life expectancy. The R-squared is 0.005176. Thus, while infant mortality is a useful predictor, this model is not able to explain a large potion of the variability in the life expectancy, and other variables should be considered.

For the second model (using population), the p-value for population is greater than 0.05, thus we can conclude that population is not a useful predictor of life expectancy.


```{r}
help(movielens)
```

# This section is contributed by Prasanga Paudel


```{r, echo=FALSE, message=FALSE}
# we will load our own R packages 
library(here)
library(knitr)
library(dslabs) # loading dslabs package as we will use movielens dataset from it
library(tidyverse) # loading tidyverse package
```


## Discriptive statistics


We will use the movielens dataset from the dslab. The discriptive stat for the datasets will be discussed in this section.

```{r}
help("movielens") #looking a the help file for movielens data
str(movielens) # getting an overview of the data structire
summary(movielens) # getting a summary of the movielens dataset
class(movielens) # obtaining the type of object movielens is
```


 We will look into the variable year to  find a year that will have high number of observation so that we can use it for our analysis.
 

```{r}
table(movielens$year)  # creating a table for variable year
```
I will pick  year 1995 as it has one of the highest number of movies.


## Data Summary for the 1995 dataset

```{r}
year1995 <- movielens %>% filter(year ==1995) #filtering year-2000 to make a new dataset
str(year1995) # getting an overview of the data structire of 1995 dataset
summary(year1995) # geting a summary of the dataset 
``` 

## Comparing new dataset with the overall dataset

The below histogram shows the distribution of the rating variable in the entire dataset
```{r}
hist(movielens$rating, # this gives a histogram for rating
     main = "Histogram of Ratings", # setting the title
     xlab = "Rating",  #setting x-axis
     col = "orange",  # setting color
     breaks = 10) # setting the bars to 5 using 10 ratings
```

The below histogram shows the distribution of rating variable within the year 1995.
```{r}
hist(year1995$rating, # this gives a histogram for rating
     main = "Histogram of Ratings", #setting the title
     xlab = "Rating",  #setting x-axis
     col = "orange", #setting the color
     breaks = 10) # setting the bars to 10 and using 10 ratings
```


## frequency distrbution of Rating in 1995 dataset.
```{r}
# Counting the occurrences of each rating
rating_counts <- table(year1995$rating) #creating a table based on count

# Displaying the table
print(rating_counts)

```


## Boxplot of selected genres and Rating ( year 1995)
```{r}
# Filtering the data to include only Drama, Comedy, and Action
filtered_data <- subset(year1995, genres %in% c("Drama", "Comedy", "Action"))
ggplot(filtered_data, aes(x = genres, y = rating)) + #setting the axis
  geom_boxplot() +
  labs(title = "Ratings across different genres",
       x = "Genres", #naming axis
       y = "Rating") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) #costomizing labels
```

## Statistical test for difference in ratings among genres

We will perform few test to analyse if there is a significant difference in ovies ratings among various ganres.

### T-test
We will perform a T-test to analyze if action and comedy genres have a statistically different ratings.

```{r}
# Filtering the rating data for Action and Comedy genres
action_ratings <- year1995$rating[year1995$genres == "Action"]
comedy_ratings <- year1995$rating[year1995$genres == "Comedy"]

# Perform a t-test, H0: action rating = comedy rating, Ha: action > comedy
t_test_result <- t.test(action_ratings, comedy_ratings, alternative = "greater") #testing the hypothesis that mean rating for the "Action" genre is greater than that for the "Comedy" genre.

# Display the results
print(t_test_result)

```

Since the p-value is greater than 0.05, we fail to reject the null. The rating between the two genres are not statistically significant.


### Linear Regression

```{r}
# Running the simple linear regression with ratings predicted using genres
model <- lm(rating ~ genres, data = filtered_data)

# View the summary of the model
summary(model)
```
Results show that the Drama genre has a significantly higher rating than the base( Action) genre. 
